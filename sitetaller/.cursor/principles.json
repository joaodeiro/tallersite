{
  "development_principles": {
    "tdd": {
      "description": "Desenvolvimento Guiado por Testes",
      "rules": [
        "Criar testes antes do código (como wireframes antes do design final)",
        "Cada funcionalidade deve ter um propósito claro",
        "Testes devem ser fáceis de entender e manter"
      ]
    },
    "solid": {
      "description": "Princípios SOLID adaptados para Design",
      "rules": [
        "Single Responsibility: Cada componente faz uma coisa só (como no Atomic Design)",
        "Open/Closed: Fácil de estender, difícil de quebrar (como um sistema de design bem feito)",
        "Liskov Substitution: Componentes devem ser intercambiáveis (como símbolos no Figma)",
        "Interface Segregation: Interfaces menores e específicas (como componentes modulares)",
        "Dependency Inversion: Depender de abstrações (como trabalhar com Auto-Layout)"
      ]
    },
    "clean_code": {
      "description": "Código Limpo para Designers",
      "rules": [
        "Nomes claros e descritivos (como layers bem nomeadas no Figma)",
        "Componentes pequenos e focados (como componentes atômicos)",
        "Evitar repetição (como usar componentes reutilizáveis)",
        "Código auto-documentado (como um design system bem organizado)"
      ]
    },
    "extreme_programming": {
      "description": "Programação Extrema adaptada para Design",
      "rules": [
        "Feedback rápido (como testes de usabilidade frequentes)",
        "Pequenas mudanças (como design iterativo)",
        "Abraçar mudanças (como design adaptativo)",
        "Simplicidade (como minimalismo no design)"
      ]
    },
    "lean_development": {
      "description": "Desenvolvimento Enxuto para Designers",
      "rules": [
        "Eliminar desperdício (como manter apenas estilos necessários)",
        "Construir com qualidade (como manter consistência no design)",
        "Criar conhecimento (como documentar decisões de design)",
        "Adiar decisões (como trabalhar com design systems flexíveis)",
        "Entregar rápido (como usar prototipação rápida)"
      ]
    },
    "pragmatic_development": {
      "description": "Desenvolvimento Pragmático para Designers",
      "rules": [
        "DRY: Não se repita (como usar componentes reutilizáveis)",
        "YAGNI: Não adicione complexidade desnecessária",
        "Fail Fast: Identificar problemas cedo (como testes de usabilidade)",
        "Automação: Automatizar tarefas repetitivas (como styles e tokens)"
      ]
    }
  }
} 